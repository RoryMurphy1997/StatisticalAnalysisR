{
return(-1*(-3*(x^2)+2*(x-10)*sin(x-0.75)))
}
op <- optim(par = 1, fn = functionTwo, method = "BFGS")
cat(op$par)
length(levels(five$V1))
length(levels(five$V1))
levels(five$V1)
?levels
?unique
#User with most accesses
unique(five$V1)
cat(length(levels(five$V1)))
five <- read.table(file = "users.dat", header = FALSE)
#Number of different users
cat(length(levels(five$V1)))
maxUse <- 0
maxUser <- ""
for(i in 1:length(levels(five$V1)))
{
use <- count(five[which(five$V1 == levels(five$V1)[i])])
if (use > maxUse)
{
maxUse = use
maxUser = levels(five$V1)[i]
}
}
#User with most accesses
cat(maxUse)
#Number of uses
cat(maxUser)
five <- read.table(file = "users.dat", header = FALSE)
#Number of different users
cat(length(levels(five$V1)))
maxUse <- 0
maxUser <- ""
for(i in 1:length(levels(five$V1)))
{
use <- length(five[which(five$V1 == levels(five$V1)[i])])
if (use > maxUse)
{
maxUse = use
maxUser = levels(five$V1)[i]
}
}
#User with most accesses
cat(maxUse)
#Number of uses
cat(maxUser)
i = 1
use <- length(five[which(five$V1 == levels(five$V1)[i])])
i = 1
use <- length(five[which(five$V1 == levels(five$V1)[i]),0])
use
levels(five$V1)
levels(five$V1)[1]
which(five$V1 == levels(five$V1)
which(five$V1 == levels(five$V1)
which(five$V1 == levels(five$V1)[1])
length(which(five$V1 == levels(five$V1)[1]))
maxUse <- 0
maxUser <- ""
for(i in 1:length(levels(five$V1)))
{
i = 1
use <- length(which(five$V1 == levels(five$V1)[i]))
if (use > maxUse)
{
maxUse = use
maxUser = levels(five$V1)[i]
}
}
#User with most accesses
cat(maxUse)
#Number of uses
cat(maxUser)
cat(length(levels(five$V1)))
maxUse <- 0
maxUser <- ""
for(i in 1:length(levels(five$V1)))
{
use <- length(which(five$V1 == levels(five$V1)[i]))
if (use > maxUse)
{
maxUse = use
maxUser = levels(five$V1)[i]
}
}
#User with most accesses
cat(maxUse)
#Number of uses
cat(maxUser)
five <- read.table(file = "users.dat", header = FALSE)
#Number of different users
cat(length(levels(five$V1)))
maxUse <- 0
maxUser <- ""
for(i in 1:length(levels(five$V1)))
{
use <- length(which(five$V1 == levels(five$V1)[i]))
if (use > maxUse)
{
maxUse = use
maxUser = levels(five$V1)[i]
}
}
#User with most accesses
cat(maxUse,"\n")
#Number of uses
cat(maxUser)
six <- read.table(file = "age_value_dat.csv", header = TRUE)
six$X..value.
six <- read.table(file = "age_value_dat.csv", header = TRUE, sep = ",")
#Create boxlot
boxplot(X..value.~age_bracket, six, names = c("Good","Bad"), col = "dodgerblue")
boxplot(value~age_bracket, six, names = c("Good","Bad"), col = "dodgerblue")
boxplot(value~age_bracket, six, col = "dodgerblue")
levels(six$age_bracket)
six <- read.table(file = "age_value_dat.csv", header = TRUE, sep = ",")
levels(six$age_bracket)[1:2] <- "Up to 24 yr"
levels(six$age_bracket)[4:5] <- "35 yr and above"
#Create boxlot
boxplot(value~age_bracket, six, col = "dodgerblue")
six <- read.table(file = "age_value_dat.csv", header = TRUE, sep = ",")
levels(six$age_bracket)[1:2] <- "Up to 24 yr"
levels(six$age_bracket)[3:5] <- "35 yr and above"
#Create boxlot
boxplot(value~age_bracket, six, col = "dodgerblue")
?boxplot
boxplot(value~age_bracket, six, pch = "+")
#Make plot square
par(pty="s")
boxplot(value~age_bracket, six, pch = "+")
#Reset par
par(op)
#Reset par
?par
par(pty="s")
boxplot(value~age_bracket, six, pch = "+")
#Reset par
par(mar = c(0, 0, 0, 0))
boxplot(value~age_bracket, six, pch = "+")
boxplot(value~age_bracket, six, pch = "+")
#Reset par
par()
#Make plot square
par(pty="s")
boxplot(value~age_bracket, six, pch = "+")
#Reset par
par(pty = "m")
boxplot(value~age_bracket, six, pch = "+")
?runif
?sample
suit <- c("Heart", "Club", "Diamond", "Clove")
#Values
cardVals <- c("A", "K", "Q", "J", 2,3,4,5,6,7,8,9,10)
#Create deck
deck <- as.vector(52)
for(i in 1:4)
{
for(j in 1:13)
{
deck <- paste(paste0(suit[i], " ", cardVals[j]))
}
}
deck
deck <- as.vector(52)
cardNumber <- 1
for(i in 1:4)
{
for(j in 1:13)
{
deck[cardNumber] <- paste(paste0(suit[i], " ", cardVals[j]))
cardNumber <- cardNumber + 1
}
}
deck
?sample
sample(deck,5)
sample(deck,5)
cat(hand)
#Sample 5
hand <- sample(deck,5)
#Print values
cat(hand)
hand <- sample(deck,5)
#Print values
for(i in 1:5)
{
cat(hand[i],"\n")
}
hand <- sample(deck,5)
#Print values
for(i in 1:5)
{
cat(hand[i],"\n")
}
hand <- sample(deck,5)
#Print values
for(i in 1:5)
{
cat(hand[i],"\n")
}
#Q1
#alphabet column
alphabet <- letters[seq( from = 1, to = 26 )]
#numbers column
numbers <- seq(from = 1, to = 26)
#alphanumbers column
alphabetNumbers <- as.vector(26)
for(i in 1:26)
{
alphabetNumbers[i] <- paste(paste0(alphabet[i], "_", numbers[i]))
}
#Create data frame
questionOne <- data.frame(alphabet = alphabet, numbers = numbers, alphanumbers = alphabetNumbers)
questionOne
functionOne <- function(x)
{
return(3*x*exp(-x)+3)
}
values <- seq(from = 0, to = 10)
plot(values,functionOne(values))
#Q3
#Create function
exp(1)
cat(op$par)
five <- read.table(file = "users.dat", header = FALSE)
#Number of different users
cat(length(levels(five$V1)))
for(i in 1:length(levels(five$V1)))
{
use <- length(which(five$V1 == levels(five$V1)[i]))
if (use > maxUse)
{
maxUse = use
maxUser = levels(five$V1)[i]
}
}
#User with most accesses
cat(maxUser,"\n")
#Number of uses
cat(maxUse)
which(five$V1 == "X0_1815_K")
#Import data
six <- read.table(file = "age_value_dat.csv", header = TRUE, sep = ",")
#Change age ranges
levels(six$age_bracket)[1:2] <- "Up to 24 yr"
levels(six$age_bracket)[3:5] <- "35 yr and above"
#Create boxlot
#Make plot square
par(pty="s")
boxplot(value~age_bracket, six, pch = "+")
#Reset par
par(pty = "m")
#Suits
suit <- c("Heart", "Club", "Diamond", "Clove")
#Values
cardVals <- c("A", "K", "Q", "J", 2,3,4,5,6,7,8,9,10)
#Create deck
deck <- as.vector(52)
#Set card count
cardNumber <- 1
#For each suit
for(i in 1:4)
{
#For each possible value in each suit
for(j in 1:13)
{
#Create a card in the deck
deck[cardNumber] <- paste(paste0(suit[i], " ", cardVals[j]))
#Increment card count
cardNumber <- cardNumber + 1
}
}
#Sample 5 cards fromd deck at random
hand <- sample(deck,5)
#Print the cards
for(i in 1:5)
{
cat(hand[i],"\n")
}
#Suits
suit <- c("Heart", "Club", "Diamond", "Clove")
#Values
cardVals <- c("A", "K", "Q", "J", 2,3,4,5,6,7,8,9,10)
#Create deck
deck <- as.vector(52)
#Set card count
cardNumber <- 1
#For each suit
for(i in 1:4)
{
#For each possible value in each suit
for(j in 1:13)
{
#Create a card in the deck
deck[cardNumber] <- paste(paste0(suit[i], " ", cardVals[j]))
#Increment card count
cardNumber <- cardNumber + 1
}
}
#Sample 5 cards fromd deck at random
hand <- sample(deck,5)
#Print the cards
for(i in 1:5)
{
cat(hand[i],"\n")
}
#Suits
suit <- c("Heart", "Club", "Diamond", "Clove")
#Values
cardVals <- c("A", "K", "Q", "J", 2,3,4,5,6,7,8,9,10)
#Create deck
deck <- as.vector(52)
#Set card count
cardNumber <- 1
#For each suit
for(i in 1:4)
{
#For each possible value in each suit
for(j in 1:13)
{
#Create a card in the deck
deck[cardNumber] <- paste(paste0(suit[i], " ", cardVals[j]))
#Increment card count
cardNumber <- cardNumber + 1
}
}
#Sample 5 cards fromd deck at random
hand <- sample(deck,5)
#Print the cards
for(i in 1:5)
{
cat(hand[i],"\n")
}
#Q1
#alphabet column
alphabet <- letters[seq( from = 1, to = 26 )]
#numbers column
numbers <- seq(from = 1, to = 26)
#alphanumbers column
alphabetNumbers <- as.vector(26)
for(i in 1:26)
{
alphabetNumbers[i] <- paste(paste0(alphabet[i], "_", numbers[i]))
}
#Create data frame
questionOne <- data.frame(alphabet = alphabet, numbers = numbers, alphanumbers = alphabetNumbers)
questionOne
#Simulate values
normalMatrix <- matrix(rnorm(100*100),nrow = 100, ncol = 100)
#Print each column to a file
for(i in 1:100)
{
name <- paste(paste0("column_number_",i,".txt"))
write.table(normalMatrix[,i], file = name)
}
normalMatrix <- matrix(rnorm(100*100),nrow = 100, ncol = 100)
#Print each column to a file
for(i in 1:100)
{
name <- paste(paste0("column_number_",i,".txt"))
write.table(normalMatrix[,i], file = name)
}
#Create function
functionOne <- function(x)
{
return(3*x*exp(-x)+3)
}
values <- seq(from = 0, to = 10)
plot(values,functionOne(values))
functionTwo <- function(x)
{
return(-1*(-3*(x^2)+2*(x-10)*sin(x-0.75)))
}
#Find minimum of negative function (or max of positive function)
op <- optim(par = 1, fn = functionTwo, method = "BFGS")
#Answer =
cat(op$par)
#Import data
five <- read.table(file = "users.dat", header = FALSE)
#Number of different users
cat(length(levels(five$V1)))
#Find maximum number of uses by a user and the user's ID
maxUse <- 0
maxUser <- ""
for(i in 1:length(levels(five$V1)))
{
use <- length(which(five$V1 == levels(five$V1)[i]))
if (use > maxUse)
{
maxUse = use
maxUser = levels(five$V1)[i]
}
}
#User with most accesses
cat(maxUser,"\n")
#Number of uses
cat(maxUse)
#Import data
five <- read.table(file = "users.dat", header = FALSE)
#Number of different users
cat(length(levels(five$V1)),"\n")
#Find maximum number of uses by a user and the user's ID
maxUse <- 0
maxUser <- ""
for(i in 1:length(levels(five$V1)))
{
use <- length(which(five$V1 == levels(five$V1)[i]))
if (use > maxUse)
{
maxUse = use
maxUser = levels(five$V1)[i]
}
}
#User with most accesses
cat(maxUser,"\n")
#Number of uses
cat(maxUse)
#Import data
six <- read.table(file = "age_value_dat.csv", header = TRUE, sep = ",")
#Change age ranges
levels(six$age_bracket)[1:2] <- "Up to 24 yr"
levels(six$age_bracket)[3:5] <- "35 yr and above"
#Create boxlot
#Make plot square
par(pty="s")
boxplot(value~age_bracket, six, pch = "+")
#Reset par
par(pty = "m")
#Suits
suit <- c("Heart", "Club", "Diamond", "Clove")
#Values
cardVals <- c("A", "K", "Q", "J", 2,3,4,5,6,7,8,9,10)
#Create deck
deck <- as.vector(52)
#Set card count
cardNumber <- 1
#For each suit
for(i in 1:4)
{
#For each possible value in each suit
for(j in 1:13)
{
#Create a card in the deck
deck[cardNumber] <- paste(paste0(suit[i], " ", cardVals[j]))
#Increment card count
cardNumber <- cardNumber + 1
}
}
#Sample 5 cards fromd deck at random
hand <- sample(deck,5)
#Print the cards
for(i in 1:5)
{
cat(hand[i],"\n")
}
#Suits
suit <- c("Heart", "Club", "Diamond", "Clove")
#Values
cardVals <- c("A", "K", "Q", "J", 2,3,4,5,6,7,8,9,10)
#Create deck
deck <- as.vector(52)
#Set card count
cardNumber <- 1
#For each suit
for(i in 1:4)
{
#For each possible value in each suit
for(j in 1:13)
{
#Create a card in the deck
deck[cardNumber] <- paste(paste0(suit[i], " ", cardVals[j]))
#Increment card count
cardNumber <- cardNumber + 1
}
}
#Sample 5 cards fromd deck at random
hand <- sample(deck,5)
#Print the cards
for(i in 1:5)
{
cat(hand[i],"\n")
}
#Suits
suit <- c("Heart", "Club", "Diamond", "Clove")
#Values
cardVals <- c("A", "K", "Q", "J", 2,3,4,5,6,7,8,9,10)
#Create deck
deck <- as.vector(52)
#Set card count
cardNumber <- 1
#For each suit
for(i in 1:4)
{
#For each possible value in each suit
for(j in 1:13)
{
#Create a card in the deck
deck[cardNumber] <- paste(paste0(suit[i], " ", cardVals[j]))
#Increment card count
cardNumber <- cardNumber + 1
}
}
#Sample 5 cards fromd deck at random
hand <- sample(deck,5)
#Print the cards
for(i in 1:5)
{
cat(hand[i],"\n")
}
