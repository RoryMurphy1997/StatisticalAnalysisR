func.one <- function(x)
{
return((x-2)^2)
}
#Run optiom par = starting value, fn = function, method = "BFGS"
optim(par = 1, fn = funct.one, method = "BFGS")
func.one <- function(x)
{
return((x-2)^2)
}
#Run optiom par = starting value, fn = function, method = "BFGS"
optim(par = 1, fn = func.one, method = "BFGS")
func.two <- function(x)
{
return(-2+x[1]^2+x[2]^2)
}
optim(par = c(1,1), fn = func.two, method = "BFGS")
func.two.grad <- function(x)
{
return(c(2*x[1], 2*x[2]))
}
optim(par = c(1,1), fn = func.two, gr = func.two.grad, method = "BFGS")
func.three.grad <- function(x,v)
{
return(c(2*x[1], 2*x[2]))
}
#Make sure to put v = after function and gradient functions
optim(par = c(1,1), fn = func.two, gr = func.two.grad, v = 3, method = "BFGS")
#Make sure to put v = after function and gradient functions
optim(par = c(1,1), fn = func.three, gr = func.three.grad, v = 3, method = "BFGS")
func.three <- function(x,v)
{
return(-2+x[1]^2+x[2]^2+v)
}
func.three.grad <- function(x,v)
{
return(c(2*x[1], 2*x[2]))
}
#Make sure to put v = after function and gradient functions
optim(par = c(1,1), fn = func.three, gr = func.three.grad, v = 3, method = "BFGS")
#Part 1
?optim
x <- 1:100
y <- .1 + .2*x + rnorm(100,0,1)
#Create scatter plot
plot(x,y,pch = 20, xlab = "X values", bty = "n", col = "dodgerblue", main = "Scatter Plot", cex.main = 1.5)
leastSquares <- function(theta, variables)
{
return(sum((variables$y - theta[1]*variabes$x -theta[0])^2))
}
parameters <- c(1,1)
variables <- list(x = c(1,2,3), y = c(1,2,3))
leastSquares(parameters, variables)
variables <- list(x = c(1,2,3), y = c(1,2,3))
leastSquares(parameters, variables)
parameters <- c(1,1)
variables <- data.frame(x = c(1,2,3), y = c(1,2,3))
leastSquares(parameters, variables)
parameters <- c(1,1)
variables <- list(x = c(1,2,3), y = c(1,2,3))
leastSquares(parameters, variables)
leastSquares <- function(theta, variables)
{
return(sum((variables$y - theta[1]*variables$x -theta[0])^2))
}
#Test
parameters <- c(1,1)
variables <- list(x = c(1,2,3), y = c(1,2,3))
leastSquares(parameters, variables)
variables <- list(x = x, y = y)
#Use 'optim' to estimate theta[0] and theta[1], the intercept and slope parameters, for the generated data in part 1
opt <- optim(par = c(1,1), fn = leastSquares, values = variables, method = "BFGS")
opt
variables <- list(x = x, y = y)
opt <- optim(par = c(1,1), fn = leastSquares, values = variables, method = "BFGS")
opt
leastSquares <- function(theta, values)
{
return(sum((values$y - theta[1]*values$x -theta[0])^2))
}
#Use 'optim' to estimate theta[0] and theta[1], the intercept and slope parameters, for the generated data in part 1
opt <- optim(par = c(1,1), fn = leastSquares, values = variables, method = "BFGS")
opt
x <- 1:100
y <- .1 + .2*x + rnorm(100,0,1)
variables <- list(x = x, y = y)
#Use 'optim' to estimate theta[0] and theta[1], the intercept and slope parameters, for the generated data in part 1
opt <- optim(par = c(1,1), fn = leastSquares, values = variables, method = "BFGS")
opt
#Create scatter plot
plot(x,y,pch = 20, xlab = "X values", ylab = "Y values", bty = "n", col = "dodgerblue", main = "Scatter Plot", cex.main = 1.5)
variables <- list(x = x, y = y)
opt <- optim(par = c(1,1), fn = leastSquares, values = variables, method = "BFGS")
opt
variables <- list(x = x, y = y)
#Use 'optim' to estimate theta[0] and theta[1], the intercept and slope parameters, for the generated data in part 1
opt <- optim(par = c(0,0), fn = leastSquares, values = variables, method = "BFGS")
opt
#Part 1
#Generate simple linear regression values
xvalues <- 1:100
yvalues <- .1 + .2*x + rnorm(100,0,1)
variables <- list(x = xvalues, y = yvalues)
#Use 'optim' to estimate theta[0] and theta[1], the intercept and slope parameters, for the generated data in part 1
opt <- optim(par = c(0,0), fn = leastSquares, values = variables, method = "BFGS")
opt
?optim
xvalues <- 1:100
yvalues <- .1 + .2*x + rnorm(100,0,1)
#Create scatter plot
plot(x,y,pch = 20, xlab = "X values", ylab = "Y values", bty = "n", col = "dodgerblue", main = "Scatter Plot", cex.main = 1.5)
#Part 2
#Create function taking vector of regression parameters (theta) and a list of named entry for y (response) and x (explanetory) values returning least squares criterion
leastSquares <- function(theta, values)
{
return(sum((values$y - theta[1]*values$x -theta[0])^2))
}
#Part 3
#Create list format of explanetory and response variables
variables <- list(x = xvalues, y = yvalues)
#Use 'optim' to estimate theta[0] and theta[1], the intercept and slope parameters, for the generated data in part 1
opt <- optim(par = c(0,0), fn = leastSquares, values = variables, method = "BFGS")
opt
#Use 'optim' to estimate theta[0] and theta[1], the intercept and slope parameters, for the generated data in part 1
opt <- optim(par = c(0,0), fn = leastSquares, values = variables)#, method = "BFGS")
opt
#Use 'optim' to estimate theta[0] and theta[1], the intercept and slope parameters, for the generated data in part 1
opt <- optim(par = c(0,0), fn = leastSquares, values = variables, method = "BFGS")
opt
leastSquares <- function(theta, values)
{
return(sum((values$y - theta[1]*values$x -theta[0])^2))
}
leastSquares(c(.1, .2), variables)
yvalues <- .1 + .2*x + rnorm(100,0,1)
#Create scatter plot
plot(x,y,pch = 20, xlab = "X values", ylab = "Y values", bty = "n", col = "dodgerblue", main = "Scatter Plot", cex.main = 1.5)
theta[1]*values$x -theta[0]
yvalues
.1 + .2*x
#Part 2
#Create function taking vector of regression parameters (theta) and a list of named entry for y (response) and x (explanetory) values returning least squares criterion
leastSquares <- function(theta, values)
{
return(sum((values$y - theta[1]*values$x -theta[0])^2))
}
leastSquares(c(.1, .2), variables)
#Part 1
#Generate simple linear regression values
xvalues <- 1:100
yvalues <- .1 + .2*x + rnorm(100,0,1)
#Create scatter plot
plot(x,y,pch = 20, xlab = "X values", ylab = "Y values", bty = "n", col = "dodgerblue", main = "Scatter Plot", cex.main = 1.5)
#Part 2
#Create function taking vector of regression parameters (theta) and a list of named entry for y (response) and x (explanetory) values returning least squares criterion
leastSquares <- function(theta, values)
{
return(sum((values$y - theta[1]*values$x -theta[0])^2))
}
leastSquares(c(.1, .2), variables)
#Part 2
#Create function taking vector of regression parameters (theta) and a list of named entry for y (response) and x (explanetory) values returning least squares criterion
leastSquares <- function(theta, values)
{
browser()
return(sum((values$y - theta[1]*values$x -theta[0])^2))
}
leastSquares(c(.1, .2), variables)
values$y
theta[1]*values$x -theta[0]
theta[1]*values$x -theta[0]
theta[1]
values$x
theta[0]
#Declare working directory
setwd("C:/Users/Cormac/Desktop/Statistical Analysis/6-Lab 6")
#Part 1
#Generate simple linear regression values
xvalues <- 1:100
yvalues <- .1 + .2*x + rnorm(100,0,1)
#Create scatter plot
plot(x,y,pch = 20, xlab = "X values", ylab = "Y values", bty = "n", col = "dodgerblue", main = "Scatter Plot", cex.main = 1.5)
#Part 2
#Create function taking vector of regression parameters (theta) and a list of named entry for y (response) and x (explanetory) values returning least squares criterion
leastSquares <- function(theta, values)
{
browser()
return(sum((values$y - theta[2]*values$x -theta[1])^2))
}
leastSquares(c(.1, .2), variables)
#Part 3
#Create list format of explanetory and response variables
variables <- list(x = xvalues, y = yvalues)
#Use 'optim' to estimate theta[0] and theta[1], the intercept and slope parameters, for the generated data in part 1
opt <- optim(par = c(0,0), fn = leastSquares, values = variables, method = "BFGS")
opt
#Generate simple linear regression values
xvalues <- 1:100
yvalues <- .1 + .2*x + rnorm(100,0,1)
#Create scatter plot
plot(x,y,pch = 20, xlab = "X values", ylab = "Y values", bty = "n", col = "dodgerblue", main = "Scatter Plot", cex.main = 1.5)
#Part 2
#Create function taking vector of regression parameters (theta) and a list of named entry for y (response) and x (explanetory) values returning least squares criterion
leastSquares <- function(theta, values)
{
return(sum((values$y - theta[2]*values$x -theta[1])^2))
}
#Part 3
#Create list format of explanetory and response variables
variables <- list(x = xvalues, y = yvalues)
#Use 'optim' to estimate theta[0] and theta[1], the intercept and slope parameters, for the generated data in part 1
opt <- optim(par = c(0,0), fn = leastSquares, values = variables, method = "BFGS")
opt
#Generate simple linear regression values
xvalues <- 1:100
yvalues <- .1 + .2*x + rnorm(100,0,1)
#Create scatter plot
plot(x,y,pch = 20, xlab = "X values", ylab = "Y values", bty = "n", col = "dodgerblue", main = "Scatter Plot", cex.main = 1.5)
#Part 2
#Create function taking vector of regression parameters (theta) and a list of named entry for y (response) and x (explanetory) values returning least squares criterion
leastSquares <- function(theta, values)
{
return(sum((values$y - theta[2]*values$x -theta[1])^2))
}
#Part 3
#Create list format of explanetory and response variables
variables <- list(x = xvalues, y = yvalues)
#Use 'optim' to estimate theta[0] and theta[1], the intercept and slope parameters, for the generated data in part 1
opt <- optim(par = c(0,0), fn = leastSquares, values = variables, method = "BFGS")
opt
#Part 1
#Generate simple linear regression values
xvalues <- 1:100
yvalues <- .1 + .2*x + rnorm(100,0,1)
#Create scatter plot
plot(x,y,pch = 20, xlab = "X values", ylab = "Y values", bty = "n", col = "dodgerblue", main = "Scatter Plot", cex.main = 1.5)
#Part 2
#Create function taking vector of regression parameters (theta) and a list of named entry for y (response) and x (explanetory) values returning least squares criterion
leastSquares <- function(theta, values)
{
return(sum((values$y - theta[2]*values$x -theta[1])^2))
}
#Part 3
#Create list format of explanetory and response variables
variables <- list(x = xvalues, y = yvalues)
#Use 'optim' to estimate theta[0] and theta[1], the intercept and slope parameters, for the generated data in part 1
opt <- optim(par = c(0,0), fn = leastSquares, values = variables, method = "BFGS")
opt
xvalues <- 1:100
yvalues <- .1 + .2*x + rnorm(100,0,1)
#Create scatter plot
plot(x,y,pch = 20, xlab = "X values", ylab = "Y values", bty = "n", col = "dodgerblue", main = "Scatter Plot", cex.main = 1.5)
#Part 2
#Create function taking vector of regression parameters (theta) and a list of named entry for y (response) and x (explanetory) values returning least squares criterion
leastSquares <- function(theta, values)
{
return(sum((values$y - theta[2]*values$x -theta[1])^2))
}
#Part 3
#Create list format of explanetory and response variables
variables <- list(x = xvalues, y = yvalues)
#Use 'optim' to estimate theta[0] and theta[1], the intercept and slope parameters, for the generated data in part 1
opt <- optim(par = c(1,1), fn = leastSquares, values = variables, method = "BFGS")
opt
#Generate simple linear regression values
xvalues <- 1:100
yvalues <- .1 + .2*x + rnorm(100,0,1)
#Create scatter plot
plot(x,y,pch = 20, xlab = "X values", ylab = "Y values", bty = "n", col = "dodgerblue", main = "Scatter Plot", cex.main = 1.5)
#Part 2
#Create function taking vector of regression parameters (theta) and a list of named entry for y (response) and x (explanetory) values returning least squares criterion
leastSquares <- function(theta, values)
{
return(sum((values$y - theta[2]*values$x -theta[1])^2))
}
#Part 3
#Create list format of explanetory and response variables
variables <- list(x = xvalues, y = yvalues)
#Use 'optim' to estimate theta[0] and theta[1], the intercept and slope parameters, for the generated data in part 1
opt <- optim(par = c(1,1), fn = leastSquares, values = variables, method = "BFGS")
opt
#Part 4
#Repeat the simulation 1000 times and create kernel density estimate
?density
thetaZero <- vector(1000)
thetaOne <- vector(1000)
for(i in 1:1000)
{
#Generate new simple linear regression values
xvalues <- 1:100
yvalues <- .1 + .2*x + rnorm(100,0,1)
#Create list for function to use
variables <- list(x = xvalues, y = yvalues)
#Determine parameter estimates
opt <- optim(par = c(1,1), fn = leastSquares, values = variables, method = "BFGS")
#Add values to vectors
thetaZero[i] <- opt$par[1]
theteOne[i] <- opt$par[2]
}
thetaZero <- vector(length = 1000)
thetaOne <- vector(length = 1000)
for(i in 1:1000)
{
#Generate new simple linear regression values
xvalues <- 1:100
yvalues <- .1 + .2*x + rnorm(100,0,1)
#Create list for function to use
variables <- list(x = xvalues, y = yvalues)
#Determine parameter estimates
opt <- optim(par = c(1,1), fn = leastSquares, values = variables, method = "BFGS")
#Add values to vectors
thetaZero[i] <- opt$par[1]
theteOne[i] <- opt$par[2]
}
for(i in 1:1000)
{
#Generate new simple linear regression values
xvalues <- 1:100
yvalues <- .1 + .2*x + rnorm(100,0,1)
#Create list for function to use
variables <- list(x = xvalues, y = yvalues)
#Determine parameter estimates
opt <- optim(par = c(1,1), fn = leastSquares, values = variables, method = "BFGS")
#Add values to vectors
thetaZero[i] <- opt$par[1]
thetaOne[i] <- opt$par[2]
}
density(thetaZero)
density(thetaOne)
density(thetaZero)
density(thetaOne)
#Compute kenrel density estimates
plot(density(thetaZero))
plot(density(thetaOne))
#Compute kenrel density estimates
plot(density(thetaZero))
#Create scatter plot
plot(x,y,pch = 20, xlab = "X values", ylab = "Y values", bty = "n", col = "dodgerblue", main = "Scatter Plot", cex.main = 1.5)
#Part 3
#Create list format of explanetory and response variables
variables <- list(x = xvalues, y = yvalues)
#Use 'optim' to estimate theta[0] and theta[1], the intercept and slope parameters, for the generated data in part 1
opt <- optim(par = c(1,1), fn = leastSquares, values = variables, method = "BFGS")
opt
thetaZero <- vector(length = 1000)
thetaOne <- vector(length = 1000)
for(i in 1:1000)
{
#Generate new simple linear regression values
xvalues <- 1:100
yvalues <- .1 + .2*x + rnorm(100,0,1)
#Create list for function to use
variables <- list(x = xvalues, y = yvalues)
#Determine parameter estimates
opt <- optim(par = c(1,1), fn = leastSquares, values = variables, method = "BFGS")
#Add values to vectors
thetaZero[i] <- opt$par[1]
thetaOne[i] <- opt$par[2]
}
#Compute kenrel density estimates
plot(density(thetaZero))
plot(density(thetaOne))
plot(density(thetaZero), xlim(c(1,5,2.5)))
plot(density(thetaOne), xlim(c(-0.5,0.5)))
#Compute kenrel density estimates, allowing for +- 0.5 for the x values to highlight the difference in variance
plot(density(thetaZero), x.lim(c(1,5,2.5)))
plot(density(thetaOne), x.lim(c(-0.5,0.5)))
#Compute kenrel density estimates, allowing for +- 0.5 for the x values to highlight the difference in variance
plot(density(thetaZero), xlim = c(1,5,2.5))
plot(density(thetaOne), xlim = c(-0.5,0.5))
plot(density(thetaZero), xlim = c(-0.3,0.7))
plot(density(thetaOne), xlim = c(-0.5,0.5))
plot(density(thetaZero), xlim = c(-0.5,0.5))
plot(density(thetaOne), xlim = c(-0.5,0.5))
#Compute kenrel density estimates, allowing for +- 0.5 of the true values for the x axis to highlight the difference in variance
plot(density(thetaZero), xlim = c(-0.3,0.7))
#Compute kenrel density estimates, allowing for +- 0.5 of the true values for the x axis to highlight the difference in variance
plot(density(thetaZero), xlim = c(-0.3,0.7))
plot(density(thetaZero), xlim = c(-0.5,0.5))
plot(density(thetaOne), xlim = c(-0.3,0.7))
